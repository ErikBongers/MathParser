* resolve Conversions and Fragments
* parseXXX() all start with createXXX();, even though the created node may not be needed.
* add line and pos to errors.
* implicit mult with power: precedence changes depending on order?
  > 2^3b  =  2^(3b) >> mult has prio
  > 2b^3  =  2(b^3) >> power has prio

Nice to have
---------------
* units :
  > mathlab not compact enough:
    https://nl.mathworks.com/help/symbolic/units-of-measurement-tutorial.html
* dates:
  > Value is currently only numeric.
    > how to solve?
    > any value can suddenly be turned into a date fragment:
      (a*5+2)hours;
    > so, fragments are ordinary Values with a unit.
    > how about dates?
    > You can't add dates:
      yesterday + today = nonsense;
    > but dates can still be used in expressions:
      lastMonday = today-3days; --> <date> = <date> op <value>
  > only once units and conversions/fragments are implemented.
  > x = '12/12/2022 23:45:11'; --> allow all parsable dates, unless ambiguous.
  > time-span: date - date -> timespan
  > now() function
  > fragments:
    > x = now().year
    > .year, .month,... 
      > are all integers, as decimals are confusing? 
      > warning when stripping a decimal part? Suggesting conversion to a lower type?
      > complex calculation:
        > (1hour/2)*4 = 2hours !! thus, no warning needed!
        > only warn about rounding at the end result
          > when assinging to  var
          > when converting to other unit.
  > half a minute?
    > 1min.sec/2 => 30sec 
    > imin/2 => omin !!!
  > data types:
    > see chrono lib
    - timepoint (don't use 'date' as this will be a unit for timepoint truncated to only the date part)
      > representation? readable date with or without time?
      > depends on unit:
        - date: only date
        - dt (or datetime?): plus time
        - time: 
          > does this make sense?
          > a time is perhaps only a duration?
          > when a 
    - duration:
      > units
        > singular and plural can be used - same meaning.
        - day, month, year, hour, minute, second
        - short version: dd, mm, yy, hh, min, ss
        Timepoints
Time_point<utc_clock> now = …;
Now():
Std:chrono::steady_clock::now() -> time_point<steady_clock>
Std:chrono::utc_clock::now() -> time_point<utc_clock>

Duration
Duration = now() - then();
Durations allow calculations and max(), floor(),…
Floor is template: floor<Sec>(duration);

See duration doc for conversions with or without precision loss, float or int.
Duration_cast<hours> from_duration to_duration: so, duration are of a type? Probably not. Cast is needed for durations of INT type. The cast defines the resolution, I guess.
Duration without cast: duration<double, millis>
So, I guess for a duration<int, sec> a duration_cast<sec> is needed?

  > units (fragments):
    >
  > conversions:
    - UTC
    - GPS
    -...
* Implicit variable:
    Implicit var _ always contains the last result (being the result of the previous statement)
    10+20+30;
    +40: //add to the result of the previous line.
    But what if:
    A=10;
    +20;//add this to A or only to implicit var or error? -> no error. Add to Implicit result.
    B=50;
    +=30; //add to var of previous line.
    +=40;// continue adding…

    C=_; //underscore is implicit var. Assign last value to C, which is B in this case;
    70;
    D=_;//D = 70

* custom functions
* resolve equations
* Variable ranges and wildcards
    Sum(a..z) : // sum all vars a to z
    Sum(a*); sum all vars that start with a; -> ambiguous syntax
    Sum([a*]);
    Ranges: always use [] ?
    Allow both (a..z) and ([a..z])

* simplify
* Latex visualisation

Unit and var with same name:
F=123;
33F; >>> alleen in dit geval warning ambiguous. Wat is oplossing? 33.F ?
33C.F; >> not ambiguous !

Voor eigen gebruik: online storage?
Of via localStorage: “Save as, in local browser”.
En ook klassieke “Save as” en “Open” en “New”, …

* drag en drop file on textarea?
* Save and open? 
  > unlikely, as this violates the browser sandbox.
  > download and upload: yes.
    > requires active webserver.