* www: comment on line: separate with colon
* Rust: see https://www.youtube.com/watch?v=4TxOD2GmWU4 for a Lexer/Tokenizer

* www: double horizontal scrollbars in text fields.

* replace codeBlock.getText(range) with
  : sources.getText(range)
  > sources is a list of source streams
  > range contains all the info needed to get text
  > put sources as high as possible. Hopefully outside codeBlock?
  > sources is part of a TranslationUnit. Or is Scope the TranslationUnit?

* to_json() function should take sources[] instead of _stream.

* varDefExists and functionExists use getText for comparison.
  > use a partial strcmp based on range instead of first creating an intermediate string

* parseExprStatement already formats text when echo=true.
  > move this to output code (to_json()? )

* resolveAssign() uses lots of existXXX() functions that take a string.
  > replace string param with a range.

* Resolver.getVar(string0 -> getVar(range)

* CodeBlock contains the _stream and getText functions.
  > should this be here?

* Allow underscores in IDs?

* Rename TokenPos to SourcePos
 
* TokenPos should be immutable because line, linePos and cursorPos are related.

* Implement electronic components notation
  > R103 = 10000 Ohm;
  > C472
  > ...?
  > implement as numberic notation like HEX,...
  > RES and CAP
  > only works when activated #define electric
  > add extra units.
  > Resistors have more versions of notations
    R47	    0.47 ohm
    4R7	    4.7 ohm
    470R	470 ohm
    4K7	    4.7 kilohm
    47K	    47 kilohm
    47K3	47.3 kilohm
    470K	470 kilohm
    4M7	    4.7 megohm
  > Resistors also have 3 digit notation
  > require them to always start with an R_ or a C_?
    > this solves the 3 digit problem.
    > only required for 3-digit notaton as the above R-notations are probably non ambiguous.

  > a setting for Tokenizer
  > generalize usage of K and M ?
    > no

* Implement combined units for V, A, R.
  > V * A = Watt !!!
  > Also create units for powers: 24V^2


* expanded functionNames like ++ --> "_inc" or ! --> "factorial" will likely not have the correct range as it's based on the length of the functionName.
* variable = unit
    m=p/PI;
    3m; //TODO: should give warning: ambiguous: m is both a variable and a unit.
    > UNDEF a single unit to get rid of the warning.

* use modulo operator for hours and date calculations = less checking to do than with remainder!
  > Duration::normalize()

* DateFunc::execute: use explodeArgs()

* Adding complex units:
    A.=m/s
    Or
    A.=(m/s)
    Or
    A.=[m/s]
    Or
    A.=(.m/.s) -> easier to program, but less intuitive.

* Custom units:
    snoep=3"gummies";
    snoep += 5gummies;
    snoep*3;

* add an ECHO statement (or function?).
  > perhaps use the !-notation?
  > It's not part of a calculation, so it's a statement.
  > allow formatting or value embedding?
  > no use of quotes needed?
  > newline, how?
  : ! this line contains a {number}
  : ! the previous line is $ and the result is _
  : ! line 3 contains this statement: #3 and it's value is #3_
  : ! line 3 contains this statement: #3 and it's value is #3_

* How to specify the last day of the monht?
  > lastDay=now().year, 12, last;
  > make 'last' a keyword? Only when #define(-d)?

* Examine the Scope object. This should contain the full environment (and parser?) for every scope level. Should Parser and Interpreter be stateless? Probably yes.

* Date deduction doesn’t work anymore:
    #define ymd
    age= ageThisYear('1/03/2015'); -> no error! (or warning?)

* make date() more robust. quick-and-dirty currently.
  > test types of arguments.
    > also units
  > return proper error messages.
  > take into account the current date format.
    > current dateformat: put in scope?
       > and use it in the date() function.

* Date: operator + and - : make generic
  > Adding a duration may contain negative values in the duration!
  > Fix this for the +operator
  > the -operator is just the +operator with all duration values made negative.
  > Durations allow calculations and max(), floor(),…
    > Floor is template: floor<Sec>(duration);


* www: undo buffer of editor not enough.
  > after F5, the editor forgets the previous states.
<script>
function closeIt()
{
  return "Any string value here forces a dialog box to \n" + 
         "appear before closing the window.";
}
window.onbeforeunload = closeIt;
</script>
  > keep 10 backups;
    - backup1..10
    - pointer to lastBackup = 3;

* Test date calculations:
  * calculations:
    - date calculations with overflow use a year of 360 days. Try to use a year of 364.nnn average.
    - duration * x ==> duration // or any other arithmetic

* FunctionDef uses Globals: replace with Scope?

* start script:
  > limits of these start statements?
    > none: why bother having restrictions.
    > start script does NOT generate output.
      > also no echo?
  > has sourceIndex = 0
  > precompile into statements that can be passed to resolver (see globals)

WWW
---
* mathparser page
  > show logged in user in upper right corner.
  > load start script into localStorage (sessionStorage!)
  > precompile startscript into resolver?
    > means resolver has to be statefull.

* Save to cloud (via functions?)
  > cloud architecture: https://www.youtube.com/watch?v=JbEiek3MNWw
  > https://cloud.google.com/functions/docs/writing/http
  > depencencies for cloud functions in package.json : https://cloud.google.com/functions/docs/create-deploy-http-nodejs
  > Via Storage: use generateDownloadUrl
  > https://stackoverflow.com/questions/49201011/can-a-cloud-function-read-from-cloud-storage
  > functions to storage example in python: https://stackoverflow.com/questions/52249978/write-to-google-cloud-storage-from-cloud-function-python
  > Authenticate Client (Bearer token) via javascript: https://cloud.google.com/endpoints/docs/frameworks/python/javascript-client
  > Authenticate Storage via Function? : https://cloud.google.com/functions/docs/samples/functions-bearer-token
  > Local development: https://cloud.google.com/functions/docs/local-development
  > Using Firestore: https://www.youtube.com/watch?v=Z87OZtIYC_0&t=288s
    > perhaps for session data?
  > free hosting + domain: https://www.youtube.com/watch?v=cG9kv5-5bPI


* Syntax highlighting is done with Mark Decorations
  > CodeMirror 6: Decorations or HighlightingStyle?
  > Wrap the decoration in a Range. RangeSet -> EditorView?
  > Or…create a parser for the output and hide the “special codes”?

* Tests: include more complex tests with multi-line code, like function defs.
* functions:
  > allow last ';' to be elimited.
  > fix all the TODO's, because quick-and-dirty code.
* startup script
  > runs before every other run.
  > could contain functions and defs of vars,...

* create prime() function -> prime factorisation.
  > Can MathParser solve : https://www.youtube.com/watch?v=vhc4FceGjC8

* Move project from WPF folder to C++ folder.
* var.fragment=x; --> gives error: unexpected ';'. Should be "can't assign to..."

* date fragment as hls should give error
    : today.year = 2022; //error!
* Date parsing;
  - return warnings if assumptions (ymd?) are being made.

* npm scripts that start with a dot:
https://stackoverflow.com/questions/50998089/running-npm-script-on-windows-starting-with-a-period

* implicit mult with power: precedence changes depending on order?
  > 2^3b  =  2^(3b) >> mult has prio
  > 2b^3  =  2(b^3) >> power has prio

GUI
---
3 possible GUIs:

1. Current one (code left, output right or bottom) --> desktop + mobile.
2. Code right, output left --> desktop only?
  > the output could be really small column if echo (!) is ignored.
  > align output with input
    * Output to left of input
      > #txtOutput .CodeMirror {  text-align: right!important;  }
      > option to 'mirror' the lines or to collapse (remove) empty output lines
      > what if output is more lines than input? 
        > Shift input?
        > Collapse output?

3. Command line.  --> desktop + mobile.
   > like mathlab.
   > actually perhaps preferred for mobile...
   > ignore echo?


Nice to have
---------------
* units :
  > mathlab not compact enough:
    https://nl.mathworks.com/help/symbolic/units-of-measurement-tutorial.html
  > complex units.
    > if you set a unit to a var BEFORE an equation:
      > when the eq is assigned to the var, a warning should be generated if the unit changes. (this allows for checking the physical dimension of your eq.)
  > custom units
    : basket = 10"apples";
    : sack = 20"pears";
    : basket+sack; //warning: units don't match
* dates:
  > goal: calculate age
    > age = (now()-birthdate).years; // -> subtraction is a duration.
    > age before end of year = <last_day_of_this_year> - birthdate;
    > how to get last day of this year based on now()?
      > trunc(now(), 'year') + 1 year - 1 day;
      > create new date in yy:mm:dd format: now().year:december:last
        > is this format with the colon unambiguous?
        > new keywords:all months, all days, and 'last' (and 'first'? No! First is alwayt 1)
        > is it always clear if we're talking about the last day or the last month?
        > 10:11:12 > always interpreted as yy:mm:dd
        > (10:11:12).year , ...and other fragments.
      > 'last'
        > can perhaps be kept for as long as possible in calculations that result in a different month? or in februari of a different year, and thus a different last day?
        > how to display 'last' in output?
          : februari 28(last) --> this version seems more intuitive to read, yet fairly short.
          > feburary 28 (last day) --> too long
          : februari 28.last  --> postfix notation? Feels like a subfield...
          : 2022:february:last(28) -> this could be both input syntax as output syntax, with or without the (28), which could be ignored when added to the input.
          
  > time-span: date - date -> timespan
  > half a minute?
    > 1min.sec/2 => 30sec 
    > imin/2 => omin !!!

  > conversions:
    - UTC
    - GPS
    -...
* Implicit variable:
    Implicit var _ always contains the last result (being the result of the previous statement)
    10+20+30;
    +40: //add to the result of the previous line.
    But what if:
    A=10;
    +20;//add this to A or only to implicit var or error? -> no error. Add to Implicit result.
    B=50;
    +=30; //add to var of previous line.
    +=40;// continue adding…

    C=_; //underscore is implicit var. Assign last value to C, which is B in this case;
    70;
    D=_;//D = 70

* resolve equations
* Variable ranges and wildcards
    Sum(a..z) : // sum all vars a to z
    Sum(a*); sum all vars that start with a; -> ambiguous syntax
    Sum([a*]);
    Ranges: always use [] ?
    Allow both (a..z) and ([a..z])

* simplify
* Latex visualisation

* drag en drop file on textarea?
* Save and open? 
  > unlikely, as this violates the browser sandbox.
  > download and upload: yes.
    > requires active webserver.


Vectors
----------
* ||x|| is the normalized vector.
  > If x = (x1, x2, x3) then ||x|| = (x1^2 + x2^2 + x3^2)^(1/2)


Extra operators
---------------
https://www.statmethods.net/management/operators.html


* www: https://www.youtube.com/watch?v=veEqYQlfNx8
  height: 100vh; // have BOTH lines, in this order, for browser support!
  height: 100svh; //vh=view height, dvh=dynamic, s=smallest as in, without the urlbar. (also lvh=largest, like vh)
  height=x%; based on parent, so not possible at heighest level.

