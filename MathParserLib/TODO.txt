* resolve Conversions and Fragments
  > start with conversions.
  > postfixId should be a valid unit.
    > even within the same 'family' or 'dimension' or 'property'
* parseXXX() all start with createXXX();, even though the created node may not be needed.
* use |x| for absolute value. (and also floor and ceil symbols? No - too difficult to type)
* don't execute() function when args have errors. 
  > remove error merging in max()d
* improve units
  > can be complex (sort of expresson with only mult, div and power)

* save last statement in localStorage.
* add line and pos to errors.
* implicit mult with power: precedence changes depending on order?
  > 2^3b  =  2^(3b) >> mult has prio
  > 2b^3  =  2(b^3) >> power has prio
* Tokenizer: replace all strlen(stream) with a variable.
* www: keypad.

Nice to have
---------------
* unary operators ++, --
* combined assignment operators: += ,...
* units : nest them with operators
  > m, km, cm, mm,...
  > conversion?
    x = 10m; //what if m is defined as var (m=mass)? Warning would be annoying...but will only display for implicit mult! So...warning is ok?
    y = (cm)x; //is casting! Programmers may prefer this.
    y = x.cm;
    y = y.cm;
    y = (10km).cm;
    y = 10km.m; // conversion from km to m.
    z = 10in.cm;
    or use : ?
    x = 10km:m;
    y  = x:in;
    z=y:cm;
  > unit definitions are grouped per property (length, weight,...)
  > how to clear units?
    a=x.;
    a=(x.)+3;
    a=x.+3;
    a=x.value;
    a=value(x);
    a=area(sdfsdfs).;
    a=a.;
  > mathlab not compact enough:
    https://nl.mathworks.com/help/symbolic/units-of-measurement-tutorial.html
* dates:
  > only once units and conversions/fragments are implemented.
  > x = '12/12/2022 23:45:11';
  > time-span: date - date -> timespan
  > now() function
  > x = now().year
  > .year, .month,... are all integers, to avoid decimal rounding errors?
  > half a minute?
    > 1min.sec/2 => 30sec 
    > imin/2 => omin !!!
* Implicit variable:
    Implicit var _ always contains the last result (being the result of the previous statement)
    10+20+30;
    +40: //add to the result of the previous line.
    But what if:
    A=10;
    +20;//add this to A or only to implicit var or error? -> no error. Add to Implicit result.
    B=50;
    +=30; //add to var of previous line.
    +=40;// continue adding…

    C=_; //underscore is implicit var. Assign last value to C, which is B in this case;
    70;
    D=_;//D = 70

* custom functions
* resolve equations

* simplify
* Latex visualisation